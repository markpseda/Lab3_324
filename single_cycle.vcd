$date
  Tue May 01 23:32:28 2018
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 8 ! current_instruction[7:0] $end
$var reg 8 " current_output[7:0] $end
$var reg 1 # clock $end
$scope module single_cycle_cpu $end
$var reg 8 $ i[7:0] $end
$var reg 1 % clk $end
$var reg 8 & o[7:0] $end
$var reg 8 ' sign_extend_val[7:0] $end
$var reg 8 ( write_data_input[7:0] $end
$var reg 8 ) rs_value[7:0] $end
$var reg 8 * rt_value[7:0] $end
$var reg 8 + addsub_input_a[7:0] $end
$var reg 8 , addsub_input_b[7:0] $end
$var reg 8 - adder_subtractor_8b_out[7:0] $end
$var reg 1 . display_enable $end
$var reg 1 / write_enable $end
$var reg 1 0 subtraction_enable $end
$var reg 2 1 rs_in[1:0] $end
$var reg 2 2 rt_in[1:0] $end
$var reg 2 3 des_in[1:0] $end
$scope module sign_extend $end
$var reg 4 4 in_4b[3:0] $end
$var reg 8 5 out_8b[7:0] $end
$upscope $end
$scope module register_mod $end
$var reg 2 6 rs[1:0] $end
$var reg 2 7 rt[1:0] $end
$var reg 2 8 des[1:0] $end
$var reg 8 9 write_data[7:0] $end
$var reg 1 : clk $end
$var reg 1 ; enablewrite $end
$var reg 8 < rsval[7:0] $end
$var reg 8 = rtval[7:0] $end
$var reg 2 > select0[1:0] $end
$var reg 2 ? select1[1:0] $end
$var reg 2 @ select2[1:0] $end
$var reg 2 A select3[1:0] $end
$var reg 8 B reg0val[7:0] $end
$var reg 8 C reg1val[7:0] $end
$var reg 8 D reg2val[7:0] $end
$var reg 8 E reg3val[7:0] $end
$var reg 1 F triggerregisters $end
$scope module reg0 $end
$var reg 8 G i[7:0] $end
$var reg 1 H i_shift_in $end
$var reg 2 I sel[1:0] $end
$var reg 1 J clock $end
$var reg 1 K enable $end
$var reg 8 L o[7:0] $end
$var reg 8 M output_value[7:0] $end
$scope module shift_reg_1 $end
$var reg 4 N i[3:0] $end
$var reg 1 O r_shift_in $end
$var reg 1 P l_shift_in $end
$var reg 2 Q sel[1:0] $end
$var reg 1 R clock $end
$var reg 1 S enable $end
$var reg 4 T o[3:0] $end
$var reg 4 U next_value[3:0] $end
$upscope $end
$scope module shift_reg_2 $end
$var reg 4 V i[3:0] $end
$var reg 1 W r_shift_in $end
$var reg 1 X l_shift_in $end
$var reg 2 Y sel[1:0] $end
$var reg 1 Z clock $end
$var reg 1 [ enable $end
$var reg 4 \ o[3:0] $end
$var reg 4 ] next_value[3:0] $end
$upscope $end
$upscope $end
$scope module reg1 $end
$var reg 8 ^ i[7:0] $end
$var reg 1 _ i_shift_in $end
$var reg 2 ` sel[1:0] $end
$var reg 1 a clock $end
$var reg 1 b enable $end
$var reg 8 c o[7:0] $end
$var reg 8 d output_value[7:0] $end
$scope module shift_reg_1 $end
$var reg 4 e i[3:0] $end
$var reg 1 f r_shift_in $end
$var reg 1 g l_shift_in $end
$var reg 2 h sel[1:0] $end
$var reg 1 i clock $end
$var reg 1 j enable $end
$var reg 4 k o[3:0] $end
$var reg 4 l next_value[3:0] $end
$upscope $end
$scope module shift_reg_2 $end
$var reg 4 m i[3:0] $end
$var reg 1 n r_shift_in $end
$var reg 1 o l_shift_in $end
$var reg 2 p sel[1:0] $end
$var reg 1 q clock $end
$var reg 1 r enable $end
$var reg 4 s o[3:0] $end
$var reg 4 t next_value[3:0] $end
$upscope $end
$upscope $end
$scope module reg2 $end
$var reg 8 u i[7:0] $end
$var reg 1 v i_shift_in $end
$var reg 2 w sel[1:0] $end
$var reg 1 x clock $end
$var reg 1 y enable $end
$var reg 8 z o[7:0] $end
$var reg 8 { output_value[7:0] $end
$scope module shift_reg_1 $end
$var reg 4 | i[3:0] $end
$var reg 1 } r_shift_in $end
$var reg 1 !" l_shift_in $end
$var reg 2 "" sel[1:0] $end
$var reg 1 #" clock $end
$var reg 1 $" enable $end
$var reg 4 %" o[3:0] $end
$var reg 4 &" next_value[3:0] $end
$upscope $end
$scope module shift_reg_2 $end
$var reg 4 '" i[3:0] $end
$var reg 1 (" r_shift_in $end
$var reg 1 )" l_shift_in $end
$var reg 2 *" sel[1:0] $end
$var reg 1 +" clock $end
$var reg 1 ," enable $end
$var reg 4 -" o[3:0] $end
$var reg 4 ." next_value[3:0] $end
$upscope $end
$upscope $end
$scope module reg3 $end
$var reg 8 /" i[7:0] $end
$var reg 1 0" i_shift_in $end
$var reg 2 1" sel[1:0] $end
$var reg 1 2" clock $end
$var reg 1 3" enable $end
$var reg 8 4" o[7:0] $end
$var reg 8 5" output_value[7:0] $end
$scope module shift_reg_1 $end
$var reg 4 6" i[3:0] $end
$var reg 1 7" r_shift_in $end
$var reg 1 8" l_shift_in $end
$var reg 2 9" sel[1:0] $end
$var reg 1 :" clock $end
$var reg 1 ;" enable $end
$var reg 4 <" o[3:0] $end
$var reg 4 =" next_value[3:0] $end
$upscope $end
$scope module shift_reg_2 $end
$var reg 4 >" i[3:0] $end
$var reg 1 ?" r_shift_in $end
$var reg 1 @" l_shift_in $end
$var reg 2 A" sel[1:0] $end
$var reg 1 B" clock $end
$var reg 1 C" enable $end
$var reg 4 D" o[3:0] $end
$var reg 4 E" next_value[3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder_subtractor $end
$var reg 1 F" mode $end
$var reg 8 G" a[7:0] $end
$var reg 8 H" b[7:0] $end
$var reg 8 I" c[7:0] $end
$var reg 1 J" b0 $end
$var reg 1 K" b1 $end
$var reg 1 L" b2 $end
$var reg 1 M" b3 $end
$var reg 1 N" b4 $end
$var reg 1 O" b5 $end
$var reg 1 P" b6 $end
$var reg 1 Q" b7 $end
$var reg 1 R" c1 $end
$var reg 1 S" c2 $end
$var reg 1 T" c3 $end
$var reg 1 U" c4 $end
$var reg 1 V" c5 $end
$var reg 1 W" c6 $end
$var reg 1 X" c7 $end
$var reg 1 Y" c8 $end
$scope module fa1 $end
$var reg 1 Z" a $end
$var reg 1 [" b $end
$var reg 1 \" cin $end
$var reg 1 ]" s $end
$var reg 1 ^" cout $end
$upscope $end
$scope module fa2 $end
$var reg 1 _" a $end
$var reg 1 `" b $end
$var reg 1 a" cin $end
$var reg 1 b" s $end
$var reg 1 c" cout $end
$upscope $end
$scope module fa3 $end
$var reg 1 d" a $end
$var reg 1 e" b $end
$var reg 1 f" cin $end
$var reg 1 g" s $end
$var reg 1 h" cout $end
$upscope $end
$scope module fa4 $end
$var reg 1 i" a $end
$var reg 1 j" b $end
$var reg 1 k" cin $end
$var reg 1 l" s $end
$var reg 1 m" cout $end
$upscope $end
$scope module fa5 $end
$var reg 1 n" a $end
$var reg 1 o" b $end
$var reg 1 p" cin $end
$var reg 1 q" s $end
$var reg 1 r" cout $end
$upscope $end
$scope module fa6 $end
$var reg 1 s" a $end
$var reg 1 t" b $end
$var reg 1 u" cin $end
$var reg 1 v" s $end
$var reg 1 w" cout $end
$upscope $end
$scope module fa7 $end
$var reg 1 x" a $end
$var reg 1 y" b $end
$var reg 1 z" cin $end
$var reg 1 {" s $end
$var reg 1 |" cout $end
$upscope $end
$scope module fa8 $end
$var reg 1 }" a $end
$var reg 1 !# b $end
$var reg 1 "# cin $end
$var reg 1 ## s $end
$var reg 1 $# cout $end
$upscope $end
$upscope $end
$scope module display $end
$var reg 8 %# reg_data[7:0] $end
$var reg 2 &# reg_num[1:0] $end
$var reg 1 '# enable $end
$var reg 1 (# clk $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00000011 !
bUUUUUUUU "
1#
b00000011 $
1%
bUUUUUUUU &
b00000011 '
bUUUUUUUU (
b00000000 )
b00000000 *
b00000000 +
bUUUUUUUU ,
bUUUUUUUU -
0.
U/
U0
b00 1
b00 2
b00 3
b0011 4
b00000011 5
b00 6
b00 7
b00 8
bUUUUUUUU 9
1:
U;
b00000000 <
b00000000 =
b00 >
b00 ?
b00 @
b00 A
b00000000 B
b00000000 C
b00000000 D
b00000000 E
0F
bUUUUUUUU G
0H
b00 I
0J
1K
b00000000 L
b00000000 M
bUUUU N
0O
0P
b00 Q
0R
1S
b0000 T
b0000 U
bUUUU V
0W
0X
b00 Y
0Z
1[
b0000 \
b0000 ]
bUUUUUUUU ^
0_
b00 `
0a
1b
b00000000 c
b00000000 d
bUUUU e
0f
0g
b00 h
0i
1j
b0000 k
b0000 l
bUUUU m
0n
0o
b00 p
0q
1r
b0000 s
b0000 t
bUUUUUUUU u
0v
b00 w
0x
1y
b00000000 z
b00000000 {
bUUUU |
0}
0!"
b00 ""
0#"
1$"
b0000 %"
b0000 &"
bUUUU '"
0("
0)"
b00 *"
0+"
1,"
b0000 -"
b0000 ."
bUUUUUUUU /"
00"
b00 1"
02"
13"
b00000000 4"
b00000000 5"
bUUUU 6"
07"
08"
b00 9"
0:"
1;"
b0000 <"
b0000 ="
bUUUU >"
0?"
0@"
b00 A"
0B"
1C"
b0000 D"
b0000 E"
UF"
b00000000 G"
bUUUUUUUU H"
bUUUUUUUU I"
UJ"
UK"
UL"
UM"
UN"
UO"
UP"
UQ"
UR"
US"
UT"
UU"
UV"
UW"
UX"
UY"
0Z"
U["
U\"
U]"
U^"
0_"
U`"
Ua"
Ub"
Uc"
0d"
Ue"
Uf"
Ug"
Uh"
0i"
Uj"
Uk"
Ul"
Um"
0n"
Uo"
Up"
Uq"
Ur"
0s"
Ut"
Uu"
Uv"
Uw"
0x"
Uy"
Uz"
U{"
U|"
0}"
U!#
U"#
U##
U$#
b00000000 %#
b00 &#
0'#
1(#
#1000000
0#
0%
b00000011 ,
0:
b00000011 H"
0(#
#2000000
b01000000 !
1#
b01000000 $
1%
b00000000 '
b00000000 ,
1.
b0000 4
b00000000 5
1:
b00000000 H"
1'#
1(#
#3000000
0#
0%
0:
0(#
#4000000
