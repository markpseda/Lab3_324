# This is the test suite for our ISA
# "#"'s are comment lines that are not used, empty lines are also not used
# Below are tests for each component of our ISA. Each line is turned into binary using
# the GenerateBinary.py script. This script is then run using our C simulator, SedaGherke_ISA.comment

# Verify registers are 0 at start
print 0
print 1
print 2
print 3
# All should print 0

# Testing load
load 0 7
load 1 -8
load 2 -1
load 3 0
print 0
print 1
print 2
print 3
# Should print 7, -8, -1, 0

# Testing print
load 0 3
load 1 2
load 2 4
load 3 1

print 0
print 1
print 2
print 3
# Should print 3, 2, 4, 1


# Testing add regular
load 0 1
load 1 1
add 2 0 1
print 2
# Should print 2

# Testing add overflow
load 0 4
load 1 0
# Four each x 8 = 32 x 4 = 128, 127 is max, should overflow to -128
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0

add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0

add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0

add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
add 1 1 0
# Should print -128 with the wraparound from 127 -> -128
print 1

# Testing sub regular
load 0 5
load 1 2
sub 2 1 0
print 2
# Should print -3

# Testing sub underflow
load 0 0
load 1 4

sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1

sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1

sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1

sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1
sub 0 0 1

# Should be -128
sub 0 0 1
print 0
# Should print 124, -4 should wrap around from -128 to 127 -3 = 124


# Testing compare
load 0 5
load 1 5
load 2 6
load 3 7

# The below should print 7 because because the compare is false and the next line executes
compare 0 2 0
print 3

# The below should print 6 because the compare is true and should skip 1 instruction
compare 0 1 0
print 1
print 2

# The below should print 5 because the compare is true and should skip 2 instrucitons
compare 1 0 1
print 3
print 2
print 1

# Verify that compare also works to avoid writing to registers
compare 0 1 0
load 3 10
print 3 

# The above should print register 3 but it should still be 7

compare 1 0 1
add 1 2 3
add 2 3 1
print 1
print 2

# The above should still print 5 and 6 



# Final Expected Result:
# 0, 0, 0, 0, 7, -8, -1, 0, 2, -128, -3, 124, 7, 6, 5, 7, 5, 6